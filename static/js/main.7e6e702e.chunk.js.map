{"version":3,"sources":["components/TextInput.jsx","utils/getWeather.js","utils/getTime.js","components/City.jsx","components/Main.jsx","components/Weather.jsx","App.js","serviceWorker.js","index.js"],"names":["TextInput","props","react_default","a","createElement","className","Object","assign","type","style","height","width","fontSize","float","border","margin","textAlign","createUrl","b","length","substr","includes","replace","isPostalCode","str","test","parseJson","cod","toString","message","parseFloat","main","temp","toFixed","c","d","require","e","f","tz","format","g","calcTime","coord","lat","lon","City","state","resp","isLoading","getWeather","_callee","val","base_url","api_call","response","current_state","_current_state","_current_state2","regenerator_default","wrap","_context","prev","next","fetch","sent","json","objectSpread","_this","setState","t0","stop","this","scope","num","Component","Main","_this$props","submitted","value","display","split","map","item","index","Fragment","key","components_City","React","PureComponent","Weather","formControls","name","valid","touched","changeHandler","event","target","updatedControls","updatedFormElement","formSubmitHandler","components_TextInput","placeholder","onChange","onClick","components_Main","App","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e6e702e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst TextInput = props => {\r\n  return (\r\n    <div className=\"container\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"input-group-lg\"\r\n        style={{\r\n          height: \"100px\",\r\n          width: \"600px\",\r\n          fontSize: \"14pt\",\r\n          float: \"right\",\r\n          border: \"1px solid #000000\",\r\n          margin: \"auto\",\r\n          textAlign: \"center\"\r\n        }}\r\n        {...props}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import { calcTime } from \"./getTime\";\r\n\r\nexport const createUrl = a => {\r\n  var b = \"https://api.openweathermap.org/data/2.5/weather\";\r\n  a = \" \" === a[a.length - 1] ? a.substr(0, a.length - 1) : a;\r\n  a = a.includes(\" \") ? a.replace(\" \", \"%20\") : a;\r\n  b = isPostalCode(a) ? b + \"?zip=\" : b + \"?q=\";\r\n  return b + (a + \"&cnt=1&APPID=b9bde36fffc04d4d37c0fc915aab9307\");\r\n};\r\n\r\nconst isPostalCode = str => /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/.test(str);\r\n\r\nexport const parseJson = a => {\r\n  if (\"200\" !== a.cod.toString()) return [a.message, \"\"];\r\n  var b = (1.8 * (parseFloat(a.main.temp) - 273.15) + 32).toFixed(2);\r\n  a = calcTime(a.coord.lat, a.coord.lon).toString();\r\n  return [b.toString() + \"\\u00b0\", a];\r\n};\r\n","export const calcTime = (b, c) => {\r\n  {\r\n    var d = require(\"tz-lookup\"),\r\n      e = require(\"moment-timezone\");\r\n    try {\r\n      var f = d(b, c),\r\n        a = e().tz(f.toString());\r\n      return (a = a.format(\"hh:mm a\"));\r\n    } catch (g) {\r\n      return \"An error has occurred looking up the time.\";\r\n    }\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { createUrl, parseJson } from \"../utils/getWeather\";\r\n\r\nclass City extends Component {\r\n  state = {\r\n    resp: [\"\", \"\"],\r\n    isLoading: true\r\n  };\r\n\r\n  getWeather = async val => {\r\n    const base_url = createUrl(val);\r\n    try {\r\n      const api_call = await fetch(base_url);\r\n      const response = await api_call.json();\r\n\r\n      if (response.cod === 401) {\r\n        const current_state = { ...this.state };\r\n        current_state.isLoading = false;\r\n        current_state.resp[0] = response.message;\r\n        this.setState(current_state);\r\n      } else {\r\n        const resp = parseJson(response);\r\n        const current_state = { ...this.state };\r\n        current_state.isLoading = false;\r\n        current_state.resp = resp;\r\n        this.setState(current_state);\r\n      }\r\n    } catch (err) {\r\n      const current_state = { ...this.state };\r\n      current_state.resp[0] =\r\n        \"An error has occurred, unable to fetch data from server.\";\r\n      this.setState(current_state);\r\n    }\r\n  };\r\n\r\n  async componentDidMount() {\r\n    this.getWeather(this.props.val);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <tr>\r\n          <td>Loading ...</td>\r\n        </tr>\r\n      );\r\n    }\r\n    return (\r\n      <tr>\r\n        <th scope=\"row\">{this.props.num}</th>\r\n        <td>{this.props.val}</td>\r\n        <td>{this.state.resp[0]}</td>\r\n        <td>{this.state.resp[1]}</td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default City;\r\n","import React from \"react\";\r\nimport City from \"./City\";\r\n\r\nclass Main extends React.PureComponent {\r\n  render() {\r\n    const { submitted, value } = this.props;\r\n    if (submitted === false || value === \"\") {\r\n      return (\r\n        <div style={{ display: \"inline-block\" }}>\r\n          <h3>Please enter a value then hit submit!</h3>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (value !== \"\" && submitted) {\r\n      return (\r\n        <table className=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">#</th>\r\n              <th scope=\"col\">City</th>\r\n              <th scope=\"col\">Temperature</th>\r\n              <th scope=\"col\">Time</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {value.split(\", \").map((item, index) => (\r\n              <React.Fragment key={item + index.toString()}>\r\n                <City\r\n                  val={item}\r\n                  num={index + 1}\r\n                  key={item + index.toString()}\r\n                />\r\n              </React.Fragment>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from \"react\";\r\nimport TextInput from \"./TextInput\";\r\nimport Main from \"./Main\";\r\n\r\nclass Weather extends Component {\r\n  state = {\r\n    formControls: {\r\n      name: {\r\n        value: \"\",\r\n        valid: false,\r\n        touched: false,\r\n        submitted: false\r\n      }\r\n    }\r\n  };\r\n\r\n  changeHandler = event => {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n\r\n    const updatedControls = {\r\n      ...this.state.formControls\r\n    };\r\n    const updatedFormElement = {\r\n      ...updatedControls[name]\r\n    };\r\n    updatedFormElement.value = value;\r\n    updatedFormElement.touched = true;\r\n    updatedFormElement.valid = value.length !== 0 ? true : false;\r\n    updatedFormElement.submitted = false;\r\n\r\n    updatedControls[name] = updatedFormElement;\r\n\r\n    this.setState({\r\n      formControls: updatedControls\r\n    });\r\n  };\r\n\r\n  formSubmitHandler = () => {\r\n    const formControls = { ...this.state.formControls };\r\n    formControls.name.submitted = true;\r\n    this.setState({ formControls });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"d-flex justify-content-between text-center\">\r\n          <div className=\"p-1\">\r\n            <div className=\"row\">\r\n              <TextInput\r\n                name=\"name\"\r\n                placeholder={\"Please enter a city or postal code\"}\r\n                value={this.state.formControls.name.value}\r\n                onChange={this.changeHandler}\r\n              />\r\n\r\n              <div className=\"mx-auto\" style={{ width: \"250px\" }}>\r\n                <button\r\n                  onClick={this.formSubmitHandler}\r\n                  className=\"btn btn-primary btn-md\"\r\n                >\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <br />\r\n            <Main\r\n              submitted={this.state.formControls.name.submitted}\r\n              value={this.state.formControls.name.value}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Weather from \"./components/Weather\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Welcome to an awesome weather app!</h1>\n      <br />\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}